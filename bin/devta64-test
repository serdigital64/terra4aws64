#!/bin/bash
#######################################
# Test Terraform modules
#
# Author: serdigital64 (https://github.com/serdigital64)
# License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt)
# Repository: https://github.com/serdigital64/terra4aws64
# Version: 1.0.0
#######################################

[[ -z "$DEVTA64_BIN" ]] && echo "Error: prepare the dev environment before executing this file" && exit 1
source "${DEVTA64_BIN}/bashlib64.bash"

function devta64_test_container_run() {
  "$DEVTA64_CMD_CONTAINER" \
    run \
    --tty \
    --volume "${DEVTA64_ROOT}:/mnt" \
    --env TF_CLI_CONFIG_FILE \
    --env TF_DATA_DIR \
    --env TF_LOG_PATH \
    --env TF_PLUGIN_CACHE_DIR \
    --env TF_LOG \
    --env TF_VAR_aws_region \
    --env TF_VAR_aws_account \
    --env TF_VAR_aws_access_key \
    --env TF_VAR_aws_secret_key \
    --env TF_VAR_ssh_key_public_test \
    "$@"
}

function devta64_test_set_workspace() {
  local container="$1"
  local module="$2"

  DEVTA64_TEST_LOCK="$DEVTA64_TEST_TARGET/.terraform.lock.hcl"
  TF_DATA_DIR="${DEVTA64_VAR}/${module}"
  TF_PLUGIN_CACHE_DIR="${DEVTA64_CACHE}/${module}"
  [[ ! -d "$TF_DATA_DIR" ]] && bl64_os_mkdir_full "$TF_DATA_DIR"
  [[ ! -d "$TF_PLUGIN_CACHE_DIR" ]] && bl64_os_mkdir_full "$TF_PLUGIN_CACHE_DIR"

  if [[ "$container" == '1' ]]; then
    TF_DATA_DIR="/mnt/$(bl64_fmt_basename "${DEVTA64_VAR}")/${module}"
    TF_PLUGIN_CACHE_DIR="/mnt/$(bl64_fmt_basename "${DEVTA64_CACHE}")/${module}"
    TF_CLI_CONFIG_FILE="/mnt/$(bl64_fmt_basename "${DEVTA64_TEST}")/terraformrc.hcl"
    DEVTA64_TEST_TARGET="/mnt/test/${module}"
  else
    TF_CLI_CONFIG_FILE="${DEVTA64_TEST}/terraformrc.hcl"
  fi
  TF_LOG_PATH="${TF_DATA_DIR}/terraform.log"
  DEVTA64_TEST_TFSTATE="${TF_PLUGIN_CACHE_DIR}/terraform.tfstate"
  TF_LOG='debug'

  return 0
}

function devta64_test_cleanup() {
  local module="$1"
  local container="$2"
  local image="$3"

  devta64_test_init "$module" '0' "$image"

  bl64_os_rm_full "${TF_PLUGIN_CACHE_DIR}/registry.terraform.io"
  bl64_os_rm_full "${TF_DATA_DIR}/modules"
  bl64_os_rm_full "${TF_DATA_DIR}/providers"
  bl64_os_rm_file "$DEVTA64_TEST_TFSTATE"
  bl64_os_rm_file "$TF_LOG_PATH"
  bl64_os_rm_file "$DEVTA64_TEST_LOCK"
  return 0
}

function devta64_test_init() {
  local module="$1"
  local container="$2"
  local image="$3"

  bl64_msg_show_task 'initialize workspace'
  devta64_test_set_workspace "$container" "$module"
  if [[ "$container" == '0' ]]; then
    cd "$DEVTA64_TEST_TARGET" &&
      "$DEVTA64_CMD_TERRAFORM" \
        'init' \
        -backend-config="path=$DEVTA64_TEST_TFSTATE" || return $?
  else
    devta64_test_container_run \
      "$image" \
      -chdir="$DEVTA64_TEST_TARGET" \
      'init' \
      -backend-config="path=$DEVTA64_TEST_TFSTATE" || return $?
  fi
}

function devta64_test_run() {
  local module="$1"
  local container="$2"
  local image="$3"

  devta64_test_init "$module" "$container" "$image"

  bl64_msg_show_task 'apply changes'
  if [[ "$container" == '0' ]]; then
    "$DEVTA64_CMD_TERRAFORM" \
      'apply' \
      -auto-approve
  else
    devta64_test_container_run "$image" \
      -chdir="$DEVTA64_TEST_TARGET" \
      'apply' \
      -auto-approve
  fi
}

function devta64_test_destroy() {
  local module="$1"
  local container="$2"
  local image="$3"

  devta64_test_init "$module" "$container" "$image"

  bl64_msg_show_task 'destroy infrastructure'
  if [[ "$container" == '0' ]]; then
    "$DEVTA64_CMD_TERRAFORM" \
      'apply' \
      -destroy \
      -auto-approve
  else
    devta64_test_container_run "$image" \
      -chdir="$DEVTA64_TEST_TARGET" \
      'apply' \
      -destroy \
      -auto-approve
  fi
}

function devta64_test_show() {
  local module="$1"
  local container="$2"
  local image="$3"

  devta64_test_init "$module" "$container" "$image"

  bl64_msg_show_task 'show current infrastructure'
  if [[ "$container" == '0' ]]; then
    "$DEVTA64_CMD_TERRAFORM" \
      'show'
  else
    devta64_test_container_run "$image" \
      -chdir="$DEVTA64_TEST_TARGET" \
      'show'
  fi
}

function devta64_test_check() {
  bl64_check_directory "$DEVTA64_TEST" &&
    bl64_check_directory "$DEVTA64_VAR" &&
    bl64_check_directory "$DEVTA64_CACHE" &&
    bl64_check_directory "$DEVTA64_TEST_TARGET" || return 1

  if [[ "$devta64_test_container_mode" == '1' ]]; then
    bl64_check_command "$DEVTA64_CMD_CONTAINER" || return 1
  else
    bl64_check_command "$DEVTA64_CMD_TERRAFORM" || return 1
  fi
}

function devta64_test_help() {
  bl64_msg_show_usage \
    '<-t|-d|-s|-c> -n Module [-i Image] [-o] [-h]' \
    'Test Terraform modules' \
    '
    -t       : Run module test (terraform init, terraform apply)
    -d       : Destroy module test infrastructure (terraform destroy)
    -s       : Show current test infrastructure (terraform show)
    -c       : Clean test environment
    ' '
    -o       : Enable container mode (run actions inside a container)
    -h       : Show help
    ' "
    -n Module: module name
    -i Image : container image name (default: $devta64_test_image)
    "
}

#
# Main
#

export DEVTA64_TEST_TFSTATE=''
export DEVTA64_TEST_TARGET=''
export DEVTA64_TEST_LOCK=''
export TF_CLI_CONFIG_FILE=''
export TF_DATA_DIR=''
export TF_LOG_PATH=''
export TF_PLUGIN_CACHE_DIR=''
export TF_LOG=''

declare devta64_test_status=1
declare devta64_test_container_mode='0'
declare devta64_test_command=''
declare devta64_test_run=''
declare devta64_test_option=''
declare devta64_test_image='docker.io/hashicorp/terraform:latest'

(($# == 0)) && devta64_test_help && exit 1
while getopts ':tdscn:i:oh' devta64_test_option; do
  case "$devta64_test_option" in
  t)
    devta64_test_command='devta64_test_run'
    devta64_test_command_tag='test module'
    ;;
  d)
    devta64_test_command='devta64_test_destroy'
    devta64_test_command_tag='destroy previous test'
    ;;
  s)
    devta64_test_command='devta64_test_show'
    devta64_test_command_tag='show current test infrastructure'
    ;;
  c)
    devta64_test_command='devta64_test_cleanup'
    devta64_test_command_tag='cleanup test environment'
    ;;
  o)
    devta64_test_container_mode='1'
    devta64_test_command_tag='enable container mode'
    ;;
  i) devta64_test_image="$OPTARG" ;;
  n) devta64_test_run="$OPTARG" ;;
  h) devta64_test_help && exit ;;
  \?) devta64_test_help && exit 1 ;;
  esac
done
[[ -z "$devta64_test_command" || -z "$devta64_test_run" ]] && devta64_test_help && exit 1
DEVTA64_TEST_TARGET="${DEVTA64_TEST}/${devta64_test_run}"
devta64_test_check || exit 1

bl64_msg_show_batch_start "$devta64_test_command_tag"
case "$devta64_test_command" in
'devta64_test_cleanup' | 'devta64_test_run' | 'devta64_test_destroy' | 'devta64_test_show')
  "$devta64_test_command" "$devta64_test_run" "$devta64_test_container_mode" "$devta64_test_image"
  ;;
esac
devta64_test_status=$?

bl64_msg_show_batch_finish $devta64_test_status "$devta64_test_command_tag"
exit $devta64_test_status
